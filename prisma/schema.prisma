generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                        Int            @id @default(autoincrement())
  first_name                String
  last_name                 String
  middle_name               String?
  suffix                    String?
  date_of_birth             DateTime
  gender                    String?
  civil_status              String?
  nationality               String?
  created_at                DateTime       @default(now())
  anonymization_preferences Json?
  other_person_data         Json?
  email_addresses           EmailAddress[]
  employee                  Employee?      @relation("PersonEmployee")
  users                     User[]
}

model User {
  id                     Int                  @id @default(autoincrement())
  employee_id            Int                  @unique
  username               String               @unique
  password               String
  email                  String               @unique
  stat                   Int                  @default(1)
  must_reset_password    Boolean              @default(true)
  password_reset         String?              @default("")
  require_reset          Int                  @default(0)
  reports_to             Int?
  is_active              Boolean              @default(true)
  last_login             DateTime?
  security_questions     Json?
  created_by             Int?
  created_at             DateTime             @default(now())
  person_id              Int?
  module_id              Int?
  role_id                Int?
  password_reset_token   PasswordResetToken[]
  employee               Employee             @relation(fields: [employee_id], references: [id])
  module                 Module?              @relation(fields: [module_id], references: [id])
  person                 Person?              @relation(fields: [person_id], references: [id])
  role                   Role?                @relation(fields: [role_id], references: [id])
  user_permissions       UserPermission[]
  permission_templates PermissionTemplate[] @relation("UserToPermissionTemplates") //many to many relationship; users can have multiple role permission templates
  //permission_template_id Int? one to one relatioship -> one to one relationship with permission template
  //permission_template    PermissionTemplate?  @relation(fields: [permission_template_id], references: [id])
  user_roles             UserRole[]
  user_token             UserToken[]
}

model Role {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  description         String
  created_at          DateTime             @default(now())
  role_permissions    RolePermission[]
  users               User[]
  user_roles          UserRole[]
  permission_template PermissionTemplate[] @relation("PermissionTemplateToRole")
}

model SubModulePermission {
  id               Int              @id @default(autoincrement())
  action           String
  sub_module_id    Int
  created_at       DateTime         @default(now())
  status           Boolean          @default(true)
  role_permissions RolePermission[]
  sub_module       SubModule        @relation(fields: [sub_module_id], references: [id])
}

model RolePermission {
  id                        Int                                @id @default(autoincrement())
  role_id                   Int
  sub_module_id             Int
  module_id                 Int
  action                    String
  status                    Boolean                            @default(true)
  sub_module_permission_id  Int?
  permission_template_links PermissionTemplateRolePermission[]
  role                      Role                               @relation(fields: [role_id], references: [id])
  permission                SubModule                          @relation(fields: [sub_module_id], references: [id])
  sub_module_permission     SubModulePermission?               @relation(fields: [sub_module_permission_id], references: [id])
  user_permission           UserPermission[]

  @@unique([role_id, sub_module_id, module_id, action], map: "role_sub_module_module_action_unique")
}

model UserPermission {
  id                   Int                     @id @default(autoincrement())
  user_role_permission String                  @default("tempo")
  user_id              Int
  user_role_id         Int
  role_permission_id   Int?
  role_permission      RolePermission?         @relation(fields: [role_permission_id], references: [id])
  user                 User                    @relation(fields: [user_id], references: [id])
  user_role            UserRole                @relation(fields: [user_role_id], references: [id])
  companies            UserPermissionCompany[]
}

model UserPermissionCompany {
  user_permission_id Int
  company_id         Int
  company            Company        @relation(fields: [company_id], references: [id])
  user_permission    UserPermission @relation(fields: [user_permission_id], references: [id])

  @@id([user_permission_id, company_id])
}

model UserRole {
  id               Int              @id @default(autoincrement())
  user_id          Int
  role_id          Int
  module_id        Int              @default(1)
  created_at       DateTime         @default(now())
  department_id    Int              @default(1)
  user_permissions UserPermission[]
  department       Department?      @relation(fields: [department_id], references: [id])
  module           Module           @relation(fields: [module_id], references: [id])
  role             Role             @relation(fields: [role_id], references: [id])
  user             User             @relation(fields: [user_id], references: [id])
}

//model UserRole {
//  id         Int      @id @default(autoincrement())
//  user_id    Int
//  role_id    Int
//  module_id  Int
//  created_at DateTime @default(now())
//  user       User     @relation(fields: [user_id], references: [id])
//  role       Role     @relation(fields: [role_id], references: [id])
//  module     Module   @relation(fields: [module_id], references: [id])
//}


model Company {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  abbreviation            String                  @unique @db.VarChar(10)
  company_code            String                  @unique @default("TEMP") @db.VarChar(10)
  created_at              DateTime                @default(now())
  employee                Employee[]
  permissionTemplates     PermissionTemplate[]
  user_permission_company UserPermissionCompany[]
}

model Division {
  id               Int          @id @default(autoincrement())
  name             String       @db.VarChar(255)
  division_head_id Int
  status           Boolean      @default(true)
  created_at       DateTime     @default(now())
  departments      Department[]
}

model Department {
  id                             Int                            @id @default(autoincrement())
  name                           String                         @db.VarChar(255)
  division_id                    Int
  status                         Boolean                        @default(true)
  department_head_id             Int?
  created_at                     DateTime                       @default(now())
  division                       Division                       @relation(fields: [division_id], references: [id])
  employees                      Employee[]
  permission_template_deparmtent PermissionTemplateDepartment[]
  positions                      Position[]
  sub_modules                    SubModule[]
  user_roles                     UserRole[]
}

model Position {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(255)
  department_id Int
  status        Boolean    @default(true)
  employee      Employee[]
  department    Department @relation(fields: [department_id], references: [id])
}

model Module {
  id         Int         @id @default(autoincrement())
  name       String
  created_at DateTime    @default(now())
  sub_module SubModule[]
  user       User[]
  user_role  UserRole[]
}

model SubModule {
  id              Int                   @id @default(autoincrement())
  name            String
  module_id       Int
  created_at      DateTime              @default(now())
  department_id   Int?
  role_permission RolePermission[]
  department      Department?           @relation(fields: [department_id], references: [id])
  module          Module                @relation(fields: [module_id], references: [id])
  permissions     SubModulePermission[]
}

model UserToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user_token String   @unique
  status     Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model PasswordResetToken {
  id             Int      @id @default(autoincrement())
  user_id        Int
  expires_at     DateTime
  created_at     DateTime @default(now())
  password_token String   @unique
  is_used        Boolean  @default(false)
  user           User     @relation(fields: [user_id], references: [id])
}

model PermissionTemplate {
  id               Int                                @id @default(autoincrement())
  name             String
  created_at       DateTime                           @default(now())
  status           Boolean                            @default(true)
  company_id       Int
  company          Company                            @relation(fields: [company_id], references: [id])
  departments      PermissionTemplateDepartment[]
  role_permissions PermissionTemplateRolePermission[]
  role             Role[]                             @relation("PermissionTemplateToRole")
  user             User[]                             @relation("UserToPermissionTemplates")

}

model PermissionTemplateDepartment {
  id                     Int                @id @default(autoincrement())
  permission_template_id Int
  department_id          Int
  department             Department         @relation(fields: [department_id], references: [id])
  permission_template    PermissionTemplate @relation(fields: [permission_template_id], references: [id])

  @@unique([permission_template_id, department_id])
}

model PermissionTemplateRolePermission {
  id                     Int                @id @default(autoincrement())
  permission_template_id Int
  role_permission_id     Int
  permission_template    PermissionTemplate @relation(fields: [permission_template_id], references: [id])
  role_permission        RolePermission     @relation(fields: [role_permission_id], references: [id])

  @@unique([permission_template_id, role_permission_id])
}

model EmailAddress {
  id            Int     @id @default(autoincrement())
  person_id     Int
  email_address String
  email_type    String
  is_primary    Boolean
  person        Person  @relation(fields: [person_id], references: [id])
}

model Employee {
  id                        Int        @id @default(autoincrement())
  company_id                Int
  person_id                 Int        @unique
  employee_id               String     @unique
  department_id             Int
  hire_date                 DateTime
  position_id               Int        @default(1)
  salary                    Decimal
  pay_frequency             String
  employment_status         String
  monthly_equivalent_salary Decimal
  created_at                DateTime   @default(now())
  archive_date              DateTime?
  other_employee_data       Json?
  corporate_rank_id         Int
  company                   Company    @relation(fields: [company_id], references: [id])
  department                Department @relation(fields: [department_id], references: [id])
  person                    Person     @relation("PersonEmployee", fields: [person_id], references: [id])
  position                  Position   @relation(fields: [position_id], references: [id])
  user                      User?
}
