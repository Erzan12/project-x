// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                        Int      @id @default(autoincrement())
  first_name                String
  last_name                 String
  middle_name               String?
  suffix                    String?
  date_of_birth             DateTime //well decide if optional or required
  gender                    String?
  civil_status              String?
  nationality               String?
  created_at                DateTime @default(now())
  anonymization_preferences Json?
  other_person_data         Json?

  // Relations
  users           User[]
  email_addresses EmailAddress[]
  employee        Employee?      @relation("PersonEmployee")
}

model User {
  id                  Int       @id @default(autoincrement())
  //person_id           Int     -> replace by employee_id because user will be link by their manager to the employee created by hr
  employee_id         Int       @unique
  username            String    @unique
  password            String
  email               String    @unique
  stat                Int       @default(1)
  must_reset_password Boolean   @default(true) // <- intended for first time log in for new user
  password_reset      String?   @default("") // <- existing user wants to reset password due to update current password or user forgot password
  require_reset       Int       @default(0) // <- intended for first time log in for new user
  role_id             Int
  reports_to          Int? //scalar if expand later change to reports_to_id so you can use it in relations
  is_active           Boolean   @default(true)
  last_login          DateTime?
  security_questions  Json?
  created_by          Int? // add this if you want to track who created the user
  created_at          DateTime  @default(now())

  // Relations
  // person               Person               @relation(fields: [person_id], references: [id]) -> replace by employee_id because user will be link by their manager to the employee created by hr
  // reports_to           User?                @relation("ReportsTo", fields: [reports_to], references: [id])
  // subordinates         User[]               @relation("ReportsTo")
  role                 Role                    @relation(fields: [role_id], references: [id])
  employee             Employee               @relation(fields: [employee_id], references: [id])
  refresh_tokens       RefreshToken[]
  user_permissions     UserPermission[]
  password_reset_token PasswordResetToken[]
  person               Person?                 @relation(fields: [person_id], references: [id])
  person_id            Int?
}

model Role {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  created_at      DateTime @default(now())

  // Relations
  users            User[]
  role_permissions RolePermission[]
}

model Permission {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  module           String
  created_at       DateTime @default(now())

  // Relations
  role_permissions RolePermission[]
  user_permissions UserPermission[]
}

model RolePermission {
  role_id       Int
  permission_id Int

  // Relations
  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@id([role_id, permission_id])
}

model UserPermission {
  user_id       Int
  permission_id Int

  user          User                    @relation(fields: [user_id], references: [id])
  permission    Permission              @relation(fields: [permission_id], references: [id])
  companies     UserPermissionCompany[]

  @@id([user_id, permission_id])
}

model UserPermissionCompany {
  user_id         Int
  permission_id   Int
  company_id      Int

  user_permission UserPermission @relation(fields: [user_id, permission_id], references: [user_id, permission_id])
  company         Company        @relation(fields: [company_id], references: [id])

  @@id([user_id, permission_id, company_id])
}

model Company {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  abbreviation            String                  @unique @db.VarChar(10)
  created_at              DateTime                @default(now())
  user_permission_company UserPermissionCompany[]
  employee                Employee[]
}

model Division {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  division_head_id Int
  created_at       DateTime @default(now())

  departments Department[] // 1:N relation with Department
}

model Department {
  id                  Int      @id @default(autoincrement())
  name                String   @db.VarChar(255)
  department_head_id  Int
  division_id         Int
  created_at          DateTime @default(now())

  division            Division   @relation(fields: [division_id], references: [id])
  employee            Employee[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int      // linked user.
  token      String   @unique //the refresh token string, usually a long random value.
  expires_at DateTime //when the token expires.
  revoked    Boolean  @default(false) // flag to mark token as revoked (user logout, password reset).
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User @relation(fields: [user_id], references: [id])
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user_id    Int
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())

  user       User @relation(fields: [user_id], references: [id])
}

model PermissionTemplate {
  id            Int      @id @default(autoincrement())
  name          String
  company_id    Int
  department_id Int
  permissions   Json
  created_at    DateTime @default(now())
}

model EmailAddress {
  id            Int     @id @default(autoincrement())
  person_id     Int
  email_address String
  email_type    String
  is_primary    Boolean

  // Relations
  person        Person @relation(fields: [person_id], references: [id])
}

model Employee {
  id                        Int       @id @default(autoincrement())
  company_id                Int // will assign company
  person_id                 Int       @unique // change to person_id because the info will be used when creating an employee by hr
  employee_id               String    @unique
  department_id             Int // will assign dept
  hire_date                 DateTime
  position                  String
  salary                    Decimal
  pay_frequency             String
  employment_status         String
  monthly_equivalent_salary Decimal
  created_at                DateTime  @default(now())
  archive_date              DateTime?
  other_employee_data       Json?
  corporate_rank_id         Int

  // Relations
  // user           User        @relation(fields: [user_id], references: [id]) -> replaced by person_id
  company           Company    @relation(fields: [company_id], references: [id])
  department        Department @relation(fields: [department_id], references: [id])
  person            Person     @relation("PersonEmployee", fields: [person_id], references: [id])
  user              User?      
}
